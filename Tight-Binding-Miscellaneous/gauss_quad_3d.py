import numpy as np

def f1(x):
	return np.cos(x)

def f3(l,m,n,x,y,z):
	if x == y == z == 0:
		return 0
	else:
		return (np.sqrt(2)/8*np.pi**2)*(np.cos(l*x+m*y+n*z))

def g3(f,l,m,n,x,y,z,ax,bx,ay,by,az,bz):
	return f(l,m,n,(bx-ax)*0.5*x+(bx+ax)*0.5,(by-ay)*0.5*y+(by+ay)*0.5,(bz-az)*0.5*z+(bz+az)*0.5)*(bx-ax)*(by-ay)*(bz-az)*0.125

points  = [
-0.97822865814605699280393800112285739077142240891978,
-0.88706259976809529907515776930392726663167575122531,
-0.73015200557404932409341625203115345804964306202613,
-0.51909612920681181592572566945860955448022711511993,
-0.26954315595234497233153198540086152467962186243905,
0,
0.26954315595234497233153198540086152467962186243905,
0.51909612920681181592572566945860955448022711511993,
0.73015200557404932409341625203115345804964306202613,
0.88706259976809529907515776930392726663167575122531,
0.97822865814605699280393800112285739077142240891978,
]
weights = [
0.055668567116173666482753720442548578728515625696898,
0.1255803694649046246346942992239401001976157913954,
0.1862902109277342514260976414316558916912847480402,
0.23319376459199047991852370484317513943179817231696,
0.26280454451024666218068886989050919537276467760315,
0.27292508677790063071448352833634218915604196989478,
0.26280454451024666218068886989050919537276467760315,
0.23319376459199047991852370484317513943179817231696,
0.1862902109277342514260976414316558916912847480402,
0.1255803694649046246346942992239401001976157913954,
0.0556685671161736664827537204425485787285156256969,
]

y_ks = np.zeros((11,11,11))
for l in range(len(weights)):
	for m in range(len(weights)):
		for n in range(len(weights)):
			integral = 0
			for i in range(len(weights)):
				for j in range(len(weights)):
					for k in range(len(weights)):
						integral += g3(f3,points[l],points[m],points[n],points[i],points[j],points[k],\
							-5.431/2,5.431/2,-5.431/2,5.431/2,-5.431/2,5.431/2)*weights[i]*weights[j]*weights[k]

			y_ks[l][m][n] = integral

f = open("s_real.dat",'w')
for l in range(len(weights)):
	for m in range(len(weights)):
		for n in range(len(weights)):
			s = "%.36f"%y_ks[l][m][n] + "\n"
			f.write(s)